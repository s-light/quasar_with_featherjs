{"version":3,"sources":["webpack:///./src/pages/Settings.vue?653c","webpack:///./src/pages/Settings.vue?9669","webpack:///src/pages/Settings.vue","webpack:///./src/pages/Settings.vue"],"names":["component","_vm","this","_h","$createElement","_c","_self","staticClass","_v","attrs","$q","dark","isActive","on","$event","toggle","staticStyle","_s","_f","globalConfig","serialDevice","serialDeviceInt","directives","name","rawName","globalConfigLoadFromServer","testDev","saveGC","scopedSlots","_u","key","fn","style","opacity","proxy","model","value","callback","$$v","expression","QPage","QBtn","QInput","QIcon","Ripple"],"mappings":"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","file":"js/6.47d80f4e.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('q-page',{staticClass:\"fit column no-wrap justify-center items-center content-center\"},[_c('h1',[_vm._v(\"Global Settings\")]),_c('section',[_c('q-btn',{attrs:{\"round\":\"\",\"color\":_vm.$q.dark.isActive ? 'blue' : 'black',\"icon\":\"mdi-lightbulb-on-outline\"},on:{\"click\":function($event){return _vm.$q.dark.toggle()}}})],1),_c('section',{staticStyle:{\"min-width\":\"4em\",\"min-height\":\"2em\",\"background-color\":\"hsla(230.1, 100%, 50%, 0.05)\",\"border-radius\":\"0.5em\",\"box-shadow\":\"0 0 20px hsla(200, 100%, 50%, 0.2)\",\"margin\":\"1em\"}},[_c('pre',[_vm._v(_vm._s(_vm._f(\"pretty\")(_vm.globalConfig)))])]),_c('section',{staticStyle:{\"min-width\":\"4em\",\"min-height\":\"2em\",\"background-color\":\"hsla(230.1, 100%, 50%, 0.05)\",\"border-radius\":\"0.5em\",\"box-shadow\":\"0 0 20px hsla(200, 100%, 50%, 0.2)\",\"margin\":\"1em\"}},[_c('pre',[_vm._v(_vm._s(_vm.serialDevice))]),_c('pre',[_vm._v(_vm._s(_vm.serialDeviceInt))])]),_c('section',[_c('q-btn',{directives:[{name:\"ripple\",rawName:\"v-ripple\"}],attrs:{\"label\":\"load from server\",\"icon\":\"sync\"},on:{\"click\":function($event){return _vm.globalConfigLoadFromServer()}}}),_c('q-btn',{directives:[{name:\"ripple\",rawName:\"v-ripple\"}],attrs:{\"label\":\"testDev Night\",\"icon\":\"sync\"},on:{\"click\":function($event){return _vm.testDev('Night')}}}),_c('q-btn',{directives:[{name:\"ripple\",rawName:\"v-ripple\"}],attrs:{\"label\":\"saveGC 'pos':'99'\",\"icon\":\"sync\"},on:{\"click\":function($event){return _vm.saveGC('pos', '99')}}}),_c('q-btn',{directives:[{name:\"ripple\",rawName:\"v-ripple\"}],attrs:{\"label\":\"saveGC 'pos':'10'\",\"icon\":\"sync\"},on:{\"click\":function($event){return _vm.saveGC('pos', '10')}}}),_c('q-btn',{directives:[{name:\"ripple\",rawName:\"v-ripple\"}],attrs:{\"label\":\"saveGC 'rot':'0°'\",\"icon\":\"sync\"},on:{\"click\":function($event){return _vm.saveGC('rot', '0°')}}}),_c('q-btn',{directives:[{name:\"ripple\",rawName:\"v-ripple\"}],attrs:{\"label\":\"saveGC 'rot':'75°'\",\"icon\":\"sync\"},on:{\"click\":function($event){return _vm.saveGC('rot', '75°')}}})],1),_c('section',[_c('q-input',{attrs:{\"filled\":\"\",\"label\":\"serial device\"},scopedSlots:_vm._u([{key:\"append\",fn:function(){return [_c('q-icon',{staticClass:\"cursor-pointer\",style:({opacity: (_vm.serialDevice !== '' ? 'inherit' : '0.1')}),attrs:{\"name\":\"close\"},on:{\"click\":function($event){_vm.serialDevice = '/dev/ttyUSB0'}}})]},proxy:true}]),model:{value:(_vm.serialDevice),callback:function ($$v) {_vm.serialDevice=$$v},expression:\"serialDevice\"}})],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../node_modules/@quasar/app/lib/webpack/loader.transform-quasar-imports.js!../../node_modules/babel-loader/lib/index.js??ref--2-0!../../node_modules/@quasar/app/lib/webpack/loader.auto-import-client.js?kebab!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Settings.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/@quasar/app/lib/webpack/loader.transform-quasar-imports.js!../../node_modules/babel-loader/lib/index.js??ref--2-0!../../node_modules/@quasar/app/lib/webpack/loader.auto-import-client.js?kebab!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Settings.vue?vue&type=script&lang=js&\"","<template>\n    <q-page class=\"fit column no-wrap justify-center items-center content-center\">\n        <h1>Global Settings</h1>\n        <section>\n\n            <q-btn\n                round\n                :color=\"$q.dark.isActive ? 'blue' : 'black'\"\n                icon=\"mdi-lightbulb-on-outline\"\n                @click=\"$q.dark.toggle()\"\n            />\n        </section>\n        <section\n            style=\"\n            min-width: 4em;\n            min-height: 2em;\n            background-color: hsla(230.1, 100%, 50%, 0.05);\n            border-radius: 0.5em;\n            box-shadow: 0 0 20px hsla(200, 100%, 50%, 0.2);\n            margin: 1em;\n            \"\n        >\n            <pre>{{ globalConfig | pretty }}</pre>\n        </section>\n        <section\n            style=\"\n            min-width: 4em;\n            min-height: 2em;\n            background-color: hsla(230.1, 100%, 50%, 0.05);\n            border-radius: 0.5em;\n            box-shadow: 0 0 20px hsla(200, 100%, 50%, 0.2);\n            margin: 1em;\n            \"\n        >\n            <pre>{{ serialDevice }}</pre>\n            <pre>{{ serialDeviceInt }}</pre>\n        </section>\n        <section>\n            <q-btn\n                v-ripple\n                label=\"load from server\"\n                icon=\"sync\"\n                @click=\"globalConfigLoadFromServer()\"\n            />\n            <q-btn\n                v-ripple\n                label=\"testDev Night\"\n                icon=\"sync\"\n                @click=\"testDev('Night')\"\n            />\n            <q-btn\n                v-ripple\n                label=\"saveGC 'pos':'99'\"\n                icon=\"sync\"\n                @click=\"saveGC('pos', '99')\"\n            />\n            <q-btn\n                v-ripple\n                label=\"saveGC 'pos':'10'\"\n                icon=\"sync\"\n                @click=\"saveGC('pos', '10')\"\n            />\n            <q-btn\n                v-ripple\n                label=\"saveGC 'rot':'0°'\"\n                icon=\"sync\"\n                @click=\"saveGC('rot', '0°')\"\n            />\n            <q-btn\n                v-ripple\n                label=\"saveGC 'rot':'75°'\"\n                icon=\"sync\"\n                @click=\"saveGC('rot', '75°')\"\n            />\n        </section>\n        <section>\n            <q-input\n                filled\n                label=\"serial device\"\n                v-model=\"serialDevice\"\n            >\n                <template v-slot:append>\n                    <q-icon\n                        :style=\"{opacity: (serialDevice !== '' ? 'inherit' : '0.1')}\"\n                        name=\"close\"\n                        @click=\"serialDevice = '/dev/ttyUSB0'\"\n                        class=\"cursor-pointer\"\n                    />\n                </template>\n            </q-input>\n        </section>\n    </q-page>\n</template>\n\n<script>\nimport {\n    // useFind,\n    useGet,\n    makeFindMixin\n} from 'feathers-vuex'\n\nexport default {\n    data () {\n        return {\n            serialDeviceInt: '/dev/ttyUSB42'\n        }\n    },\n    mixins: [\n        makeFindMixin({ service: 'global-config' })\n    ],\n    computed: {\n        globalConfigParams () {\n            return { query: {} }\n        },\n        serialDevice: {\n            get () {\n                // return this.$store.state.appconfig.globalMessage\n                // console.log(this)\n                // const modelClassName = 'GlobalConfig'\n                // const configName = 'serialDevice'\n                // const ModelClass = this.$FeathersVuex.api[modelClassName]\n                // // const gcEntry = ModelClass.getFromStore(configName)\n                // const { item: gcEntry } = useGet({\n                //     model: ModelClass,\n                //     id: configName\n                // })\n                // console.log('serialDevice get:', gcEntry.value.value)\n                // return gcEntry.value.value\n\n                // const configName = 'serialDevice'\n                // const modelClassName = 'GlobalConfig'\n                // const ModelClass = this.$FeathersVuex.api[modelClassName]\n                // const gcEntry = ModelClass.getFromStore(configName)\n                // console.log('serialDevice get', gcEntry)\n                // let resultValue = null\n                // if (gcEntry) {\n                //     resultValue = gcEntry.value\n                // }\n                const resultValue = null\n                return resultValue\n            },\n            set (val) {\n                // do something\n                console.group('serialDevice set')\n                console.log('val', val)\n                // this.serialDeviceInt = val\n                // console.log('this.$store', this.$store)\n                // console.log('this.$FeathersVuex', this.$FeathersVuex)\n                // console.log('this.$store', this.$store)\n\n                const configName = 'serialDevice'\n                const modelClassName = 'GlobalConfig'\n                const ModelClass = this.$FeathersVuex.api[modelClassName]\n\n                const gcEntryNew = new ModelClass({\n                    id: configName,\n                    name: configName,\n                    value: val\n                })\n                gcEntryNew.save().then(() => {\n                    console.log('saveGC save: done.')\n                }).catch((error) => {\n                    console.error('saveGC save: ' + error.message, error)\n                })\n                console.groupEnd()\n            }\n        }\n    },\n    methods: {\n        globalConfigLoadFromServer: function () {\n            console.log('TODO: implement load from server')\n            this.$axios.get('/config/global-config.json')\n                .then((response) => {\n                    // this.data = response.data\n                    console.log('response.data', response.data)\n                    this.$q.notify({\n                        color: 'info',\n                        message: 'Loaded config from server. Processing now.',\n                        icon: 'info'\n                    })\n\n                    this.$q.notify({\n                        color: 'positive',\n                        message: 'done.',\n                        icon: 'info'\n                    })\n                })\n                .catch(() => {\n                    this.$q.notify({\n                        color: 'negative',\n                        message: 'Loading failed',\n                        icon: 'report_problem'\n                    })\n                })\n        },\n        testDev: function (val) {\n            console.group('testDev')\n\n            const configName = 'serialDevice'\n            const modelClassName = 'GlobalConfig'\n            const ModelClass = this.$FeathersVuex.api[modelClassName]\n\n            console.log('this', this)\n            console.log('val', val)\n\n            console.log('useGet')\n            // const { item: gcEntry, isPending } = useGet({\n            const { item: gcEntry } = useGet({\n                model: ModelClass,\n                id: configName\n            })\n            console.log('gcEntry', gcEntry)\n            if (gcEntry.value) {\n                console.log('gcEntry.value', gcEntry.value)\n                console.log('gcEntry.value.value', gcEntry.value.value)\n                console.log('gcEntry.value.name', gcEntry.value.name)\n                console.log('gcEntry.value.id', gcEntry.value.id)\n            }\n\n            // ModelClass.get(configName).then((result) => {\n            //     console.log('result', result)\n            // }).catch((error) => {\n            //     console.error(error.message, error)\n            // })\n            // no record found\n\n            // const gcEntry = ModelClass.getFromStore(configName)\n            // console.log('gcEntry', gcEntry)\n            // console.log('gcEntry.value', gcEntry.value)\n\n            // console.log('new ModelClass')\n            // const gcEntryNew = new ModelClass({\n            //     id: configName,\n            //     name: configName,\n            //     value: this.serialDeviceInt,\n            //     description: 'testDev - ' + val + ' - new entry'\n            // })\n            // gcEntryNew.save().then(() => {\n            //     console.log('gcEntryNew save: done.')\n            // }).catch((error) => {\n            //     console.error('gcEntryNew save: ' + error.message, error)\n            // })\n            // console.log('gcEntryNew', gcEntryNew)\n            // console.log('gcEntryNew.value', gcEntryNew.value)\n\n            // gcEntry.value.patch({\n            //     value: 'HelloWorld Sun'\n            // }).then(() => {\n            //     console.log('patch done.')\n            // })\n            // gcEntry.value.save().then(() => {\n            //     console.log('save done.')\n            // })\n            // console.log('gcEntry.value.value', gcEntry.value.value)\n\n            // this.$store.dispatch(\n            //     'global-config/patch', [configName, {\n            //         name: configName,\n            //         value: 'HelloWorld'\n            //     }, {}]\n            // ).then(() => {\n            //     console.log('patch done.')\n            // }).catch((error) => {\n            //     console.error(error.message, error)\n            // })\n\n            console.groupEnd()\n        },\n        saveGC: function (configName, val) {\n            console.group('saveGC')\n\n            const modelClassName = 'GlobalConfig'\n            const ModelClass = this.$FeathersVuex.api[modelClassName]\n\n            console.log('this', this)\n            console.log('configName', configName)\n            console.log('val', val)\n\n            console.log('new ModelClass')\n            const gcEntryNew = new ModelClass({\n                id: configName,\n                name: configName,\n                value: val,\n                description: 'testDev - ' + val + ' - new entry'\n            })\n            gcEntryNew.save().then(() => {\n                console.log('saveGC save: done.')\n            }).catch((error) => {\n                console.error('saveGC save: ' + error.message, error)\n            })\n            console.log('gcEntryNew', gcEntryNew)\n            console.log('gcEntryNew.value', gcEntryNew.value)\n\n            // gcEntry.value.patch({\n            //     value: 'HelloWorld Sun'\n            // }).then(() => {\n            //     console.log('patch done.')\n            // })\n            // gcEntry.value.save().then(() => {\n            //     console.log('save done.')\n            // })\n            // console.log('gcEntry.value.value', gcEntry.value.value)\n\n            // this.$store.dispatch(\n            //     'global-config/patch', [configName, {\n            //         name: configName,\n            //         value: 'HelloWorld'\n            //     }, {}]\n            // ).then(() => {\n            //     console.log('patch done.')\n            // }).catch((error) => {\n            //     console.error(error.message, error)\n            // })\n\n            console.groupEnd()\n        }\n    },\n    filters: {\n        pretty: function (value) {\n            let valueJson = value\n            try {\n                valueJson = JSON.parse(value)\n            } catch (e) {\n                // console.log(value, e)\n            }\n            return JSON.stringify(valueJson, null, 4)\n        }\n    },\n    name: 'PageSettings'\n}\n</script>\n","import { render, staticRenderFns } from \"./Settings.vue?vue&type=template&id=38fe34e3&\"\nimport script from \"./Settings.vue?vue&type=script&lang=js&\"\nexport * from \"./Settings.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\nimport QPage from 'quasar/src/components/page/QPage.js';\nimport QBtn from 'quasar/src/components/btn/QBtn.js';\nimport QInput from 'quasar/src/components/input/QInput.js';\nimport QIcon from 'quasar/src/components/icon/QIcon.js';import Ripple from 'quasar/src/directives/Ripple.js';\nimport qInstall from \"../../node_modules/@quasar/app/lib/webpack/runtime.auto-import.js\";\nqInstall(component, 'components', {QPage,QBtn,QInput,QIcon});qInstall(component, 'directives', {Ripple});\n"],"sourceRoot":""}